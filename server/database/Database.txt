/*
   ____    _  _____  _    _     ___   ____  ___  ____
  / ___|  / \|_   _|/ \  | |   / _ \ / ___|/ _ \/ ___|
 | |     / _ \ | | / _ \ | |  | | | | |  _| | | \___ \
 | |___ / ___ \| |/ ___ \| |__| |_| | |_| | |_| |___) |
  \____/_/   \_\_/_/   \_\_____\___/ \____|\___/|____/
 */
/*
  Table Catalogo de Editorial
  -- Busqueda por Editorial EL nombre no es idoneo dado que se refiere tambien a agrupaciones como empresas
  y creadores de contenido como 'platzi', 'codigo facitilio', 'edx', 'etc'
 */
create table "CatalogEditorials"(
  id serial unique,
  image varchar(100) null,
  description varchar(200) null,
  name varchar(80) not null,
  primary key (id)
);

/*
  Table Catalogo de Autores
  -- Oficiales y No Oficiales
 */
create table "CatalogAuthors"(
  id serial unique,
  image varchar(100) null,
  description varchar(200) null,
  lastName varchar(40) not null,
  firstName varchar(40) not null,
  createdAt timestamp default current_timestamp,
  primary key (id)
);

/*
  Tabla Catalogo de Tipos
  -- Usada para la agrupacion de Repositorios
*/
create table "CatalogTypes"(
  id serial unique,
  value varchar(30) not null,
  description varchar(200) default '',
  primary key (id)
);

/*
  Tabla Catalogo de Temas
  -- Usada para la agrupacion de Repositorios
*/
create table "CatalogTopics"(
  id serial unique,
  value varchar(30) not null,
  description varchar(200) not null default '',
  primary key (id)
);

/*
  _____  _    ____  _        _    ____
 |_   _|/ \  | __ )| |      / \  / ___|
   | | / _ \ |  _ \| |     / _ \ \___ \
   | |/ ___ \| |_) | |___ / ___ \ ___) |
   |_/_/   \_\____/|_____/_/   \_\____/
 */

/*
  Tabla Usuario
*/
CREATE TABLE "Users"(
  id serial unique,
  email varchar(80) unique not null,
  username varchar(20) unique not null,
  password varchar(80) unique not null,
  firstName varchar(40) not null,
  lastName varchar(40) not null,
  type smallint not null default 0,
  createdAt timestamp default current_timestamp,
  updatedAt timestamp,
  primary key(id, username)
);

/*
  Tabla Repositorio
  -- Usada para verificacion de email (agregacion y cambio y actualizacion), recuperacion de password, etc.
*/
create table "Repositories"(
  id serial unique,
  idUser int not null,
  username varchar(20) not null,
  title varchar(80) not null,
  description varchar(200) not null,
  url varchar(100) not null, --Enlace Externo
  file varchar(100) not null, --Enlace Externo o Relacionado con Archivos "Files"(url)
  image varchar(100) not null, --Enlace Externo o Relacionado con Archivos "Files"(url)
  tags varchar(120) not null, --Separadas por ',',
  visibility smallint default 0,
  createdAt timestamp default current_timestamp,
  updatedAt timestamp,
  primary key (id),
  foreign key (idUser) references "User"(id),
  foreign key (username) references "User"(username)
);
select * from "Repositories";

/*  ____  _____ _        _    ____ ___ ___  _   _ _____ ____
 |  _ \| ____| |      / \  / ___|_ _/ _ \| \ | | ____/ ___|
 | |_) |  _| | |     / _ \| |    | | | | |  \| |  _| \___ \
 |  _ <| |___| |___ / ___ \ |___ | | |_| | |\  | |___ ___) |
 |_| \_\_____|_____/_/   \_\____|___\___/|_| \_|_____|____/
*/

create table "RepositoryAuthors"(
  id serial unique,
  idRepository int,
  idAuthor int,
  primary key (id),
  foreign key (idRepository ) references "Repositories"(id),
  foreign key (idAuthor) references "CatalogAuthors"(id)
);

create table "RepositoryTypes"(
  id serial unique,
  idRepository int,
  idCatalog int,
  primary key (id),
  foreign key (idRepository ) references "Repositories"(id),
  foreign key (idCatalog) references "CatalogTypes"(id)
);

create table "RepositoryTopics"(
  id serial unique,
  idRepository int,
  idCatalog int,
  primary key (id),
  foreign key (idRepository ) references "Repositories"(id),
  foreign key (idCatalog) references "CatalogTopics"(id)
);

create table "RepositoryEditorials"(
  id serial unique,
  idRepository int,
  idCatalog int,
  primary key (id),
  foreign key (idRepository ) references "Repositories"(id),
  foreign key (idCatalog) references "CatalogEditorials"(id)
);

/*
  _   _ _____ _     ____  _____ ____  ____
 | | | | ____| |   |  _ \| ____|  _ \/ ___|
 | |_| |  _| | |   | |_) |  _| | |_) \___ \
 |  _  | |___| |___|  __/| |___|  _ < ___) |
 |_| |_|_____|_____|_|   |_____|_| \_\____/
 */

/*
  Tabla Verificacion De Token
  -- Usada para verificacion de email (agregacion y cambio y actualizacion), recuperacion de password, etc.
*/
drop table "VerificationToken";
create table "Verification_Token"(
  id serial unique,
  idUser int not null,
  username varchar(20) ,
  token varchar(120) not null,
  type smallint not null,
  createdAt timestamp default current_timestamp,
  expiredAt timestamp,
  primary key (id),
  foreign key (idUser) references "User"(id),
  foreign key (username) references "User"(username)
);

/*
  Table Token de Dispositivo
*/

/**
 Para "Notificaciones Push" Se Esta Planteando Aun Si Se Contemplara O No
 */

/*
  Tabla Archivos
  -- Usada para el almacenamiento de archivos (Imagen de Repositorio, Archuivo de Repositio) Relacionado Con La URL
*/
drop table "Files";
create table "Files"(
  id serial unique,
  type smallint not null,
  path varchar(80) not null,
  url varchar(80) unique not null,
  createdAt timestamp not null,
  primary key (id)
);

/*
   ____ ___  __  __ _   _ _   _ ___ ____    _    ____
  / ___/ _ \|  \/  | | | | \ | |_ _|  _ \  / \  |  _ \
 | |  | | | | |\/| | | | |  \| || || | | |/ _ \ | | | |
 | |__| |_| | |  | | |_| | |\  || || |_| / ___ \| |_| |
  \____\___/|_|  |_|\___/|_| \_|___|____/_/   \_\____/
*/

create table "MyList"(
  id serial unique,
  idUser int not null,
  username varchar(20) not null,
  idRepository int not null,
  type smallint default 0,  -- Favorito. Siguiendo, Leyendo, ... Pendiente
  createdAt timestamp default current_timestamp,
  primary key (id),
  foreign key (idRepository) references "Repositories"(id),
  foreign key (idUser) references "User"(id),
  foreign key (username) references "User"(username)
);

create table "RepositoryComment"(
  id serial unique,
  idUser int not null,
  username varchar(20) not null,
  idRepositoty int not null,
  comment varchar(255) not null,
  createdAt timestamp default current_timestamp,
  updatedAt timestamp,
  primary key (id),
  foreign key  (idRepositoty) references "Repositories"(id),
  foreign key (idUser) references "User"(id),
  foreign key (username) references "User"(username)
);

/*
  Critica, Calificacion
 */

create table "RepositoryScore"(
  id serial unique,
  idUser int not null,
  username varchar(20) not null,
  score smallint not null,
  comment varchar(255) null,
  createdAt timestamp default current_timestamp,
  updatedAt timestamp,
  primary key (id),
  foreign key (idUser) references "User"(id),
  foreign key (username) references "User"(username)
);

create table "Bundle"(
  id serial unique,
  idUser int not null,
  title varchar(80) not null,
  description varchar(200) not null,
  oficial boolean default false,
  username varchar(20) not null,
  createdAt timestamp,
  primary key (id),
  foreign key (idUser) references "User"(id),
  foreign key (username) references "User"(username)
);
-- Se Agregara Pobablemente Likes El Cual Sera Referencia Pero No Se Calculado Al Mommento Si No Cada Dia

create table "RepositoryBundle"(
  id serial unique,
  idRepository int not null,
  createdAt timestamp default current_timestamp,
  primary key (id),
  foreign key (idRepository) references "Repositories"(id)
);

create table "BundleComment"(
  id serial unique,
  idUser int not null,
  username varchar(20) not null,
  idBundle int not null,
  comment varchar(255) not null,
  createdAt timestamp default current_timestamp,
  updatedAt timestamp,
  primary key (id),
  foreign key (idBundle) references "Bundle"(id),
  foreign key (idUser) references "User"(id),
  foreign key (username) references "User"(username)
);

select * from "Repositories";

select
      Repo.*, Ca.*, CTy.*, CEd.* from "Repositories" as Repo
      left join "RepositoryAuthors" as A on Repo.id = A.idRepository
        left join "CatalogAuthors" as CA on A.idAuthor = CA.id
      left join "RepositoryTypes" as Ty on Repo.id = Ty.idRepository
        left join "CatalogTypes" as CTy on Ty.idCatalog= CTy.id
      left join "RepositoryTopics" as Top on Repo.id = Top.idRepository
        left join "CatalogTopics" as CTo on Top.idCatalog= CTo.id
      left join "RepositoryEditorials" as Ed on Repo.id = Ed.idRepository
        left join "CatalogEditorials" as CEd on Ed.idCatalog= CEd.id;

create view "VRepositoryEditorials" as
  select RE.id, C2.name, C2.image  from "RepositoryEditorials" as RE inner join "CatalogEditorials" C2 on RE.idCatalog = C2.id

create view "VRepositoryTopics" as
  select RE.id, C2.value  from "RepositoryTopics" as RE inner join "CatalogTopics" C2 on RE.idCatalog = C2.id;

create view "VRepositoryTypes" as
  select RE.id, C2.value  from "RepositoryTypes" as RE inner join "CatalogTypes" C2 on RE.idCatalog = C2.id;

create view "VRepositoryAuthors" as
  select RA.id, C2.id as "idAuthor", C2.firstName, C2.lastName  from "RepositoryAuthors" as RA inner join "CatalogAuthors" C2 on RA.idAuthor = C2.id;
